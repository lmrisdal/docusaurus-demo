"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[8920],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),h=i,g=c["".concat(l,".").concat(h)]||c[h]||d[h]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7213:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={},l="Rest Inbound Adapter",u={unversionedId:"Adapters/Inbound/rest",id:"Adapters/Inbound/rest",title:"Rest Inbound Adapter",description:"- Rest Inbound Adapter",source:"@site/docs/Adapters/Inbound/rest.md",sourceDirName:"Adapters/Inbound",slug:"/Adapters/Inbound/rest",permalink:"/Adapters/Inbound/rest",draft:!1,editUrl:"https://github.com/lmrisdal/docusaurus-demo/tree/main/docs/Adapters/Inbound/rest.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Event Grid Adapter",permalink:"/Adapters/Inbound/event-grid"},next:{title:"Service Bus Inbound Adapter",permalink:"/Adapters/Inbound/service-bus"}},p={},d=[{value:"Limitations",id:"limitations",level:2},{value:"Extending Logging",id:"extending-logging",level:2},{value:"Configuring Restful message intake",id:"configuring-restful-message-intake",level:2},{value:"Polling interval",id:"polling-interval",level:2},{value:"Retry",id:"retry",level:2}],c={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rest-inbound-adapter"},"Rest Inbound Adapter"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#rest-inbound-adapter"},"Rest Inbound Adapter"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#limitations"},"Limitations")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#extending-logging"},"Extending Logging")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#configuring-restful-message-intake"},"Configuring Restful message intake")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#polling-interval"},"Polling interval")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#retry"},"Retry"))))),(0,a.kt)("p",null,"ConnXio (CX) lets customers provide data to the CX pipeline by providing it through a Rest endpoint. This page details how to set up a Rest fetch integration and the limits of using Api's in this way."),(0,a.kt)("h2",{id:"limitations"},"Limitations"),(0,a.kt)("p",null,"The greatest limitation calling Api's is the general statelessness of Api endpoints, in essence; how does CX know what it picked up from the endpoint last time and how do we ensure that data arrives in the correct order on the receiver side? The most obvious way to solve the problem of knowing what was requested is to keep track of this on the Api side. This could however cause desynchronization when messages fail and are not handled before the ",(0,a.kt)("a",{parentName:"p",href:"#polling-interval"},"polling interval")," fires again. Another solution is to practice ",(0,a.kt)("a",{parentName:"p",href:"https://en.wiktionary.org/wiki/soft_deletion#:~:text=Noun,data-itself-from-the-database."},"soft delete")," on items and make the receiving system ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Idempotence"},"idempotent"),". A third solution is to update the Api side with Acknowledgements on another endpoint for every file that is successfully delivered to the receiver. All of these strategies are applicable and could be used to mitigate desynchronization, however they are only necessary because data is picked up via Rest and are usually not needed when using other adapters, it's therefore seen as a limitation of the Rest adapter."),(0,a.kt)("h2",{id:"extending-logging"},"Extending Logging"),(0,a.kt)("p",null,"CX will add an ",(0,a.kt)("inlineCode",{parentName:"p"},"InterchangeId")," header to the intake request to facilitate for continued transactional logging on the sender side if applicable."),(0,a.kt)("h2",{id:"configuring-restful-message-intake"},"Configuring Restful message intake"),(0,a.kt)("p",null,'To configure CX to start fetching data from a Rest endpoint select the "REST" option in the "Inbound Connection" shape:'),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://cmhpictsa.blob.core.windows.net/pictures/Azure%20storage%20menu.png?sv=2020-04-08&st=2021-10-27T11%3A56%3A53Z&se=2040-10-28T12%3A56%3A00Z&sr=b&sp=r&sig=S%2FltUS0elTLePVt5Aq536uNkr7Pa9XcY8ovTFJLUhmc%3D",alt:"img"})),(0,a.kt)("p",null,"A new window pops up. Add data as seen below:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://cmhpictsa.blob.core.windows.net/pictures/Rest%20Inbound%20Config.png?sv=2020-08-04&st=2021-11-04T11%3A54%3A52Z&se=2040-11-05T11%3A54%3A00Z&sr=b&sp=r&sig=A2BUYolZuVJZ08rvAFV91MXGTRtGP%2F7Ybns0gjELH3o%3D",alt:"img"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Method"),": The Http verb (or method as its properly called) to use when contacting the restful endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Endpoint Url"),": The url of the endpoint."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Security Configuration"),": The ",(0,a.kt)("a",{parentName:"li",href:"/Security/Security-Configurations"},"security configuration")," to use for authenticating the request."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Headers & Authorization Header Type"),": Add headers here as necessary to either authenticate the request or add other needed parameters.")),(0,a.kt)("h2",{id:"polling-interval"},"Polling interval"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"needs picture"),"\nPolling interval dictates when the fetch operation triggers from CX. The minimum interval allowed at this time is 60 seconds. You can specify intervals by typing in seconds."),(0,a.kt)("h2",{id:"retry"},"Retry"),(0,a.kt)("p",null,"Since CX reaches out and picks up files when using the Rest inbound adapter, retry is handled by the CX framework. If a fault happens when the ",(0,a.kt)("a",{parentName:"p",href:"#polling-interval"},"polling interval")," hits, the integration will be marked for execution at the next interval, which is after 60 seconds. This means that even if you have the polling interval set to trigger hourly or event daily, CX will try to execute the configuration every minute util it succeeds. This does not happen if the message is already picked up however since CX cant be sure the message is possible to requeue on the external message. The message will then be sent to catastrophic retry as described in the ",(0,a.kt)("a",{parentName:"p",href:"/Retry"},"Retry Page"),"."))}h.isMDXComponent=!0}}]);