"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Overview","href":"/docusaurus-demo/","docId":"overview"},{"type":"category","label":"Adapters","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docusaurus-demo/Adapters/Overview","docId":"Adapters/Overview"},{"type":"category","label":"Inbound","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The ConnXio Api","href":"/docusaurus-demo/Adapters/Inbound/api","docId":"Adapters/Inbound/api"},{"type":"link","label":"Azure Storage Outbound Adapter","href":"/docusaurus-demo/Adapters/Inbound/azure-storage","docId":"Adapters/Inbound/azure-storage"},{"type":"link","label":"Email Inbound Adapter","href":"/docusaurus-demo/Adapters/Inbound/email","docId":"Adapters/Inbound/email"},{"type":"link","label":"Event Grid Adapter","href":"/docusaurus-demo/Adapters/Inbound/event-grid","docId":"Adapters/Inbound/event-grid"},{"type":"link","label":"Rest Inbound Adapter","href":"/docusaurus-demo/Adapters/Inbound/rest","docId":"Adapters/Inbound/rest"},{"type":"link","label":"Service Bus Inbound Adapter","href":"/docusaurus-demo/Adapters/Inbound/service-bus","docId":"Adapters/Inbound/service-bus"},{"type":"link","label":"(S)FTP inbound adapter","href":"/docusaurus-demo/Adapters/Inbound/sftp","docId":"Adapters/Inbound/sftp"}]},{"type":"category","label":"Outbound","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Acknowledgements","href":"/docusaurus-demo/Adapters/Outbound/acknowledgment","docId":"Adapters/Outbound/acknowledgment"},{"type":"link","label":"Azure Storage Outbound Adapter","href":"/docusaurus-demo/Adapters/Outbound/azure-storage","docId":"Adapters/Outbound/azure-storage"},{"type":"link","label":"Rest Outbound Adapter","href":"/docusaurus-demo/Adapters/Outbound/rest","docId":"Adapters/Outbound/rest"},{"type":"link","label":"Service Bus Outbound Adapter","href":"/docusaurus-demo/Adapters/Outbound/service-bus","docId":"Adapters/Outbound/service-bus"},{"type":"link","label":"(S)FTP Outbound adapter","href":"/docusaurus-demo/Adapters/Outbound/sftp","docId":"Adapters/Outbound/sftp"}]}]},{"type":"category","label":"Integrations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating Integrations","href":"/docusaurus-demo/Integrations/creating-integrations","docId":"Integrations/creating-integrations"}]},{"type":"category","label":"Managament","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Management Api","href":"/docusaurus-demo/Managament/management-api","docId":"Managament/management-api"}]},{"type":"category","label":"Security","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Security Configurations","href":"/docusaurus-demo/Security/security-configurations","docId":"Security/security-configurations"}],"href":"/docusaurus-demo/Security/"},{"type":"category","label":"Transformation","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Integration Account","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Flat File","href":"/docusaurus-demo/Transformation/Integration Account/flat-file","docId":"Transformation/Integration Account/flat-file"},{"type":"link","label":"Integration Account Mapping","href":"/docusaurus-demo/Transformation/Integration Account/mapping","docId":"Transformation/Integration Account/mapping"}]},{"type":"link","label":"Batching","href":"/docusaurus-demo/Transformation/batching","docId":"Transformation/batching"},{"type":"link","label":"Code Components","href":"/docusaurus-demo/Transformation/code-components","docId":"Transformation/code-components"},{"type":"link","label":"Data Collection","href":"/docusaurus-demo/Transformation/data-collection","docId":"Transformation/data-collection"},{"type":"link","label":"Format Conversion","href":"/docusaurus-demo/Transformation/format-conversion","docId":"Transformation/format-conversion"},{"type":"link","label":"Prettify Content","href":"/docusaurus-demo/Transformation/prettify","docId":"Transformation/prettify"},{"type":"link","label":"Splitting","href":"/docusaurus-demo/Transformation/splitting","docId":"Transformation/splitting"},{"type":"link","label":"Variable Replacement","href":"/docusaurus-demo/Transformation/variable-replacement","docId":"Transformation/variable-replacement"}]},{"type":"category","label":"Use Cases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"On premise data retrieval use case","href":"/docusaurus-demo/use-cases/on-premise-data-retrieval","docId":"Use Cases/on-premise-data-retrieval"},{"type":"link","label":"Persistent Orchestration","href":"/docusaurus-demo/use-cases/persistent-orchestration","docId":"Use Cases/persistent-orchestration"},{"type":"link","label":"Persisting State","href":"/docusaurus-demo/use-cases/persisting-state","docId":"Use Cases/persisting-state"}],"href":"/docusaurus-demo/use-cases"},{"type":"link","label":"Core Concepts","href":"/docusaurus-demo/core-concepts","docId":"core-concepts"},{"type":"link","label":"Encoding","href":"/docusaurus-demo/encoding","docId":"encoding"},{"type":"link","label":"Functionality","href":"/docusaurus-demo/functionality","docId":"functionality"},{"type":"link","label":"Logging","href":"/docusaurus-demo/logging","docId":"logging"},{"type":"link","label":"Metadata","href":"/docusaurus-demo/metadata","docId":"metadata"},{"type":"link","label":"Resending","href":"/docusaurus-demo/resending","docId":"resending"},{"type":"link","label":"Retry","href":"/docusaurus-demo/retry","docId":"retry"}]},"docs":{"Adapters/Inbound/api":{"id":"Adapters/Inbound/api","title":"The ConnXio Api","description":"The ConnXio (CX) Api is reachable through our Api Management (APIM) proxy and gives customers the ability to push messages through the CX pipeline with webhooks as well as use direct transformation endpoints that uses CX\'s internal logic to map, split or batch messages with code components within their own flows. This page describes the api including information and resources needed to use it.","sidebar":"tutorialSidebar"},"Adapters/Inbound/azure-storage":{"id":"Adapters/Inbound/azure-storage","title":"Azure Storage Outbound Adapter","description":"ConnXio (CX) lets customers provide messages to the CX pipeline by configuring connections to Azure Storage accounts. We currently support messages as blobs or files. This page details how to configure Azure storage connections and what functionality is available by delivering files through this medium.","sidebar":"tutorialSidebar"},"Adapters/Inbound/email":{"id":"Adapters/Inbound/email","title":"Email Inbound Adapter","description":"ConnXio (CX) lets customers provide messages to the CX pipeline by configuring connections to email accounts. We currently support POP3 and IMAP protocols. This page details limitations of email protocols and how to configure and connect to an email account.","sidebar":"tutorialSidebar"},"Adapters/Inbound/event-grid":{"id":"Adapters/Inbound/event-grid","title":"Event Grid Adapter","description":"ConnXio (CX) lets customers provide messages to the CX pipeline by leveraging Azure Event Grid. This page details how to configure Event Grid in CX but does not describe how to set up or configure Event Grid itself, please refer to the Microsoft documentation for more information about Event Grid.","sidebar":"tutorialSidebar"},"Adapters/Inbound/rest":{"id":"Adapters/Inbound/rest","title":"Rest Inbound Adapter","description":"ConnXio (CX) lets customers provide data to the CX pipeline by providing it through a Rest endpoint. This page details how to set up a Rest fetch integration and the limits of using Api\'s in this way.","sidebar":"tutorialSidebar"},"Adapters/Inbound/service-bus":{"id":"Adapters/Inbound/service-bus","title":"Service Bus Inbound Adapter","description":"ConnXio (CX) lets customers provide data to the CX pipeline by enqueueing it onto Azure Service Bus. This page details how to create an integration which pick up messages from Azure Service Bus.","sidebar":"tutorialSidebar"},"Adapters/Inbound/sftp":{"id":"Adapters/Inbound/sftp","title":"(S)FTP inbound adapter","description":"ConnXio (CX) lets customers provide messages to the CX pipeline by supplying files via Sftp (there are very few differences between FTP and Sftp while configuring CX, when we write Sftp we mean both FTP and Sftp unless otherwise specified). This page details limitations of the Sftp protocol and how to configure and connect to a Sftp server.","sidebar":"tutorialSidebar"},"Adapters/Outbound/acknowledgment":{"id":"Adapters/Outbound/acknowledgment","title":"Acknowledgements","description":"ConnXio (CX) provides users with the option to receive acknowledgement (ack) events when a message has been delivered to the receiving system. The concept of sending ACK messages is inspired by the TCP protocol and gives our customers the ability to verify that a message has been delivered successfully in close to real time. When enabled, this feature supplies an external system with an event with contents supplied by using the standard CX code mapping functionality, which makes the ACK message extremely powerful as it can contain almost anything, even the delivered message itself. This page describes how to enable this functionality and common use cases.","sidebar":"tutorialSidebar"},"Adapters/Outbound/azure-storage":{"id":"Adapters/Outbound/azure-storage","title":"Azure Storage Outbound Adapter","description":"ConnXio (CX) lets customers receive messages from the CX pipeline by configuring connections to Azure Storage accounts. We currently support messages as blobs or files. This page details how to configure Azure storage connections and what functionality is available by delivering files through this medium.","sidebar":"tutorialSidebar"},"Adapters/Outbound/rest":{"id":"Adapters/Outbound/rest","title":"Rest Outbound Adapter","description":"ConnXio (CX) lets customers receive data from the CX pipeline through a RESTful endpoint. This page details how to set up a RESTful receive adapter and the limits of using Rest to receive information from CX. When we describe something as \\"using Rest\\" or being \\"a Rest endpoint\\" we are implicitly stating that it\'s RESTful.","sidebar":"tutorialSidebar"},"Adapters/Outbound/service-bus":{"id":"Adapters/Outbound/service-bus","title":"Service Bus Outbound Adapter","description":"ConnXio (CX) lets customers receive data from the CX pipeline by enqueueing it onto Azure Service Bus. This page details how to create an integration which sends messages to Azure Service Bus.","sidebar":"tutorialSidebar"},"Adapters/Outbound/sftp":{"id":"Adapters/Outbound/sftp","title":"(S)FTP Outbound adapter","description":"ConnXio (CX) lets customers receive messages from the CX pipeline via Sftp (there are very few differences between FTP and Sftp while configuring CX, when we write Sftp we mean both FTP and Sftp unless otherwise specified). This page details limitations of the Sftp protocol and how to configure and connect to a Sftp server.","sidebar":"tutorialSidebar"},"Adapters/Overview":{"id":"Adapters/Overview","title":"Overview","description":"We use the word \\"Adapters\\" to describe the components that start or complete an integration flow by interfacing with systems outside of ConnXio (CX) through various protocols. Subsequently we put adapters into two categories; inbound and outbound.","sidebar":"tutorialSidebar"},"core-concepts":{"id":"core-concepts","title":"Core Concepts","description":"- Core Concepts [needs work]","sidebar":"tutorialSidebar"},"encoding":{"id":"encoding","title":"Encoding","description":"Encoding is a complex and hazardous area of integration. When we talk about encoding in ConnXio (CX) we mean the actual character encoding used to compile the messages or files. A in depth overview of encoding can be found on Wikipedia. This page describes how CX handles encoding and potential pitfalls.","sidebar":"tutorialSidebar"},"functionality":{"id":"functionality","title":"Functionality","description":"We categorize functionality in CX by two states; in development and production ready. This page describes the two states and how they are handled within the documentation.","sidebar":"tutorialSidebar"},"Integrations/creating-integrations":{"id":"Integrations/creating-integrations","title":"Creating Integrations","description":"Before reading this page please read the core concepts page where we explain a lot of the concepts essential to understanding ConnXio (CX). This page describes the integration creation process and design in CX.","sidebar":"tutorialSidebar"},"logging":{"id":"logging","title":"Logging","description":"ConnXio (CX) lets customers use a variety of different logging options, solutions and setups. Communicate Norge offers our transaction-based logging software Archeo as a supplement to ConnXio, and since we develop both products, the compatibility and feature richness is enhanced with this combination. However, we also support sending logs via webhook, which allows for logging to the customers logging provider of choice. This page details how to set up logging and how logging is configured.","sidebar":"tutorialSidebar"},"Managament/management-api":{"id":"Managament/management-api","title":"Management Api","description":"The Management Api for ConnXio (CX) gives customers access to their subscriptions and company context programmatically. Using the endpoints provided by said Api will let you perform CRUD operations on integrations. By incorporating calls to the Management Api in CI/CD pipelines you can curate your transformations and integrations from within your own version control or DevOps system. The Api is hosted next to the Messaging Api and the swagger is found here:  This page explains the technical details around the Api and contains examples of how to call and authorize towards it.","sidebar":"tutorialSidebar"},"metadata":{"id":"metadata","title":"Metadata","description":"When the pipeline instance is created within CX upon data entering through an adapter, a context is implicitly created with the message. This context describes what type of message and what type of transformations said message will experience through CX. All of this information is compiled into an object we have called metadata which follows the message on its journey through the CX pipeline. The metadata object is used for various purposes internally in CX and it\'s also possible make CX include the object in log events. For Archeo we have a separate system for metadata that is displayed in its own section of the archeo log (see Archeo for further information), for other logging providers the metadata is included in the JSON as its own object.","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"Overview","description":"When we decided to explore the concept of an integration by configuration solution we used every ounce of our experience and insight into the integration challenges of our customers, our employees and the business at large to imagine a tool that could help everyone develop more robust integration-solutions faster, smarter and cheaper.  With the advent of ConnXio we\'ve reached that goal, and we are proud to announce our solution to the world.","sidebar":"tutorialSidebar"},"resending":{"id":"resending","title":"Resending","description":"Resending in ConnXio (CX) functions differently based upon the event type you react to. Only one of the two event types are enabled at present which means that CX supports only one type of resending mechanism. We will describe both of them here, the non-active methods will be marked. If you need to use non-active methods, please contact us for more information.","sidebar":"tutorialSidebar"},"retry":{"id":"retry","title":"Retry","description":"CX uses multiple layers of retry to ensure the highest possible robustness. We currently use three types of retry:","sidebar":"tutorialSidebar"},"Security/security":{"id":"Security/security","title":"Security","description":"ConnXio (CX) handles a lot of secure parameters and information. This page details how CX handles various security issues and concerns. If you\'re looking for information regarding data storage and statelessness please look at the Core Concepts page.","sidebar":"tutorialSidebar"},"Security/security-configurations":{"id":"Security/security-configurations","title":"Security Configurations","description":"A security configuration is basically just a convenient way to store adapter and logging credentials. This gives customers the ability to securely store credentials and reuse them on multiple integrations. This page describes how to create a security configuration.","sidebar":"tutorialSidebar"},"Transformation/batching":{"id":"Transformation/batching","title":"Batching","description":"ConnXio (CX) gives customers the ability to batch messages into larger single units. We do this by creating a bucket where messages are queued for a set interval until they are picked up, run through a code mapping and then sent as a single message through the pipeline. There are certain limits to batching functionality that will be explained on this page as well the process of batching itself.","sidebar":"tutorialSidebar"},"Transformation/code-components":{"id":"Transformation/code-components","title":"Code Components","description":"ConnXio (CX) uses C# code to transform data at multiple points through the CX pipeline. This page describes how to create a code component for transformation, where you can use it and what possibilities open up to you by using it. See splitting and batching for information on code components within those processes.","sidebar":"tutorialSidebar"},"Transformation/data-collection":{"id":"Transformation/data-collection","title":"Data Collection","description":"ConnXio (CX) supports various forms of orchestration most prominent among them is enrichment and this is fueled by data collection. Data collection refers to the act of getting data over HTTP as a transformations tep. This enables customers to collect data from all resources that support HTTP and use them within transformations, variable replacements and url generation. This page describes how to use and configure data collection.","sidebar":"tutorialSidebar"},"Transformation/format-conversion":{"id":"Transformation/format-conversion","title":"Format Conversion","description":"ConnXio (CX) supports quick conversion between XML and JSON, we call this feature format conversion. This is a simple way to transform message content to and from pre determined formats in an easy to configure way. We are looking into adding more formats, please contact us if you have suggestions.","sidebar":"tutorialSidebar"},"Transformation/Integration Account/flat-file":{"id":"Transformation/Integration Account/flat-file","title":"Flat File","description":"Flat file transformation is facilitated by Azure Integration Account and uses the XSLT transform feature. This is specialized enterprise functionality that requires in-depth knowledge of advanced BizTalk features. We do not recommend using this feature unless you have said knowledge and experience.","sidebar":"tutorialSidebar"},"Transformation/Integration Account/mapping":{"id":"Transformation/Integration Account/mapping","title":"Integration Account Mapping","description":"Integration account mapping is built upon Azure Integration Account and uses the maps feature. This is specialized enterprise functionality that requires in-depth knowledge of advanced BizTalk features. We do not recommend using this feature unless you have said knowledge and experience.","sidebar":"tutorialSidebar"},"Transformation/prettify":{"id":"Transformation/prettify","title":"Prettify Content","description":"ConnXio (CX) supports prettifying message content in XML and JSON. As JSON data is often output without line breaks to save space, it can be extremely difficult to actually read and make sense of it. This feature hopes to solve the problem by formatting and beautifying the JSON data so that it is easy to read and debug by human beings.","sidebar":"tutorialSidebar"},"Transformation/splitting":{"id":"Transformation/splitting","title":"Splitting","description":"ConnXio (CX) gives customers the ability to split messages into smaller units. We do this by running the content through a Code Component that defines how the file should be split and then sends the smaller units through the pipeline as new messages. This page describes how to utilize the splitting functionality.","sidebar":"tutorialSidebar"},"Transformation/variable-replacement":{"id":"Transformation/variable-replacement","title":"Variable Replacement","description":"At various stages through ConnXio (CX) you can use the variable replacement functionality to access metadata and message content to enrich everything from URL\'s to file names and logging options. This page details where and how to use variable replacement.","sidebar":"tutorialSidebar"},"Use Cases/index":{"id":"Use Cases/index","title":"Use Cases","description":"","sidebar":"tutorialSidebar"},"Use Cases/on-premise-data-retrieval":{"id":"Use Cases/on-premise-data-retrieval","title":"On premise data retrieval use case","description":"","sidebar":"tutorialSidebar"},"Use Cases/persistent-orchestration":{"id":"Use Cases/persistent-orchestration","title":"Persistent Orchestration","description":"","sidebar":"tutorialSidebar"},"Use Cases/persisting-state":{"id":"Use Cases/persisting-state","title":"Persisting State","description":"This page is incomplete and should not be used.","sidebar":"tutorialSidebar"}}}')}}]);